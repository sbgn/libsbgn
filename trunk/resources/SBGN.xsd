<xsd:schema 
	targetNamespace="http://sbgn.org/libsbgn/pd/0.1"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" 	
	xmlns:sbgn-pd="http://sbgn.org/libsbgn/pd/0.1"
	elementFormDefault="qualified">
	<xsd:annotation>
		<xsd:documentation>
			The target namespace is to be used for versioning the spec, as recommended by W3C
		</xsd:documentation>
	</xsd:annotation>

	<!-- Type Definitions -->	
	<xsd:attributeGroup name="PointAttributes">
		<xsd:attribute name="x" type="xsd:float" use="required"/>
		<xsd:attribute name="y" type="xsd:float" use="required"/>
	</xsd:attributeGroup>

	<xsd:element name="bbox">
		<xsd:annotation>
			<xsd:documentation>
				bbox defines outer bounding box, even if the shape
				is irregular (as may be the case for compartments.
				In the case of process nodes, the ports and the lines to them
				should be included in the bounding box.
				bbox can also be (optionally) added to labels
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attributeGroup ref="sbgn-pd:PointAttributes"/>
			<xsd:attribute name="w" type="xsd:float" use="required"/>					
			<xsd:attribute name="h" type="xsd:float" use="required"/>					
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="map">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="sbgn-pd:glyph" minOccurs="0" maxOccurs="unbounded"/>
				<xsd:element ref="sbgn-pd:arc" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="sbgn">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="sbgn-pd:map" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="glyph">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:choice>
					<xsd:annotation>
						<xsd:documentation>
							Either some label(s), or a state element [state variables only]
							Label is optional. You should not define a label for process nodes.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:element ref="sbgn-pd:label" minOccurs="0" maxOccurs="1"/>
					<xsd:element name="state" minOccurs="0" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation>
								State should only be used for state variables. It then replaces the label
							</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:attribute name="value" type="xsd:string" use="required">
								<xsd:annotation>
									<xsd:documentation>
										value can be either from a predefined set of string (P, S, etc.)
										which correspond to specific SBO terms, or any arbitrary string
									</xsd:documentation>
								</xsd:annotation>
							</xsd:attribute>	
							<xsd:attribute name="variable" type="xsd:string" use="optional">
								<xsd:annotation>
									<xsd:documentation>
										variable is required
										when there is more than one state variable on a given EPN
									</xsd:documentation>
								</xsd:annotation>
							</xsd:attribute>
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>

				<xsd:element name="clone" minOccurs="0" maxOccurs="1">
					<xsd:annotation>
						<xsd:documentation>
							Clone should only be used for clone marker.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="sbgn-pd:label" minOccurs="0" maxOccurs="1"/>
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
								
				<xsd:element ref="sbgn-pd:bbox" minOccurs="1" maxOccurs="1">
					<xsd:annotation>
						<xsd:documentation>
							 Bounding box is mandatory and unique: exactly one per glyph
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>

				<xsd:element ref="sbgn-pd:glyph" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation>
							Subnodes are for states and units of information
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				
				<xsd:element name="port" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation>
							ports are necessary for process nodes, but we may decide to
							use them also for other glyph types in the future, to help
							routing arcs
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="x" type="xsd:float" use="required"/>
						<xsd:attribute name="y" type="xsd:float" use="required"/>
						<xsd:attribute name="id" type="xsd:ID" use="required">	
							<xsd:annotation>
								<xsd:documentation>
									xsd:ID type is an alphanumeric identifier, starting with a letter.
									It is recommended to generate meaningless ID's such as glyph1234.
									Avoid ID's that have meaning in them, such as "epn1" or "epn_ethanol"
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>					
					</xsd:complexType>
				</xsd:element>
			</xsd:sequence>

			<xsd:attribute name="class" default="unspecified entity">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<!-- Entity Pool Node classes -->
						<xsd:enumeration value="unspecified entity"/>
						<xsd:enumeration value="simple chemical"/>
						<xsd:enumeration value="macromolecule"/>
						<xsd:enumeration value="nucleic acid feature"/>
						<xsd:enumeration value="simple chemical multimer"/>
						<xsd:enumeration value="macromolecule multimer"/>
						<xsd:enumeration value="nucleic acid feature multimer"/>
						<xsd:enumeration value="complex"/>
						<xsd:enumeration value="complex multimer"/>
						<xsd:enumeration value="source and sink"/>
						<xsd:enumeration value="perturbing agent"/>
						<!-- Other -->
						<xsd:enumeration value="compartment"/>
						<xsd:enumeration value="submap"/>
						<xsd:enumeration value="tag"/>
						<!-- Process Node classes -->
						<xsd:enumeration value="process"/>
						<xsd:enumeration value="omitted process"/>
						<xsd:enumeration value="uncertain process"/>
						<xsd:enumeration value="association"/>
						<xsd:enumeration value="dissociation"/>
						<xsd:enumeration value="phenotype"/>
						<!-- Logical Operator classes -->
						<xsd:enumeration value="and"/>
						<xsd:enumeration value="or"/>
						<xsd:enumeration value="not"/>
						<!-- Subglyph on glyph classes -->
						<xsd:enumeration value="state variable"/>
						<xsd:enumeration value="unit of information"/>
						<!-- Subglyph on arc classes -->
						<xsd:enumeration value="stoichiometry"/>
						<!-- NB Arc classes are in a separate enumeration -->
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="orientation" default="horizontal">
				<xsd:annotation>
					<xsd:documentation>
						Orientation attribute is only meaningful for some glyph classes
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<!-- horizontal / vertical are for process nodes -->
						<xsd:enumeration value="horizontal"/>
						<xsd:enumeration value="vertical"/>
						<!-- left / right / up / down are for tags -->
						<xsd:enumeration value="left"/>
						<xsd:enumeration value="right"/>
						<xsd:enumeration value="up"/>
						<xsd:enumeration value="down"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="id" type="xsd:ID" use="required" />
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="arc">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:annotation>
					<xsd:documentation>
						Subnodes are for stoichiometry markers, no more than one per arc
					</xsd:documentation>
				</xsd:annotation>
				<xsd:element ref="sbgn-pd:glyph" minOccurs="0" maxOccurs="1">
					<xsd:annotation>
						<xsd:documentation>
							an arc has one source, and one target
							which reference either a glyph or a glyph port
		
							The arc route is described by a "start" point, 
							followed by 0 or more "next" element (describing segments)
							followed by one "end" element (also describing a segment)
							An arc can be approximated by linking the start and end with a straight line
							
							"next" and "end" elements describe the end point of a segment
							The start point of this segment is assumed to be the same as the end point of
							the previous segment (or the "start" element, in the case of the first segment)
							
							The "end" element defines the final part of the arc. 
							Thus the "start" and "end" elements are very different: 
							"start" only specifies a single coordinate,
							whereas "end" specifies a whole (curving) segment.
							
							Each curve segment is described with control points which are children
							of the "next" or "end" element.
							This control points can be ignored (segment is drawn as a straight line)
							Segments are Bezier curves.
							No control point means a straight line (linear Bezier curve)
							1 control point means a quadratic Bezier curve.
							2 control points mean a cubic Bezier curve.
							There is no need for a type attribute.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="start" minOccurs="1" maxOccurs="1">
					<xsd:complexType>
						<xsd:attributeGroup ref="sbgn-pd:PointAttributes"/>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="next" minOccurs="0" maxOccurs="unbounded">
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="sbgn-pd:point" minOccurs="0" maxOccurs="2"/>
						</xsd:sequence>
						<xsd:attributeGroup ref="sbgn-pd:PointAttributes"/>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="end" minOccurs="1" maxOccurs="1">
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="sbgn-pd:point" minOccurs="0" maxOccurs="2"/>
						</xsd:sequence>
						<xsd:attributeGroup ref="sbgn-pd:PointAttributes"/>
					</xsd:complexType>
				</xsd:element>
			</xsd:sequence>
			
			<xsd:attribute name="class">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:annotation>
							<xsd:documentation>
								in case of reversible reactions, 
								use production on both the left and right hand sice arcs
							</xsd:documentation>
						</xsd:annotation>
						<xsd:enumeration value="production"/>
						<xsd:enumeration value="consumption"/>
						<xsd:enumeration value="modulation"/>
						<xsd:enumeration value="stimulation"/>
						<xsd:enumeration value="catalysis"/>
						<xsd:enumeration value="inhibition"/>
						<xsd:enumeration value="necessary stimulation"/>
						<xsd:enumeration value="logic arc"/>
						<xsd:enumeration value="equivalence arc"/>
						<!-- NB Process- and Entity Pool node classes are in a separate enumeration -->
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="source" type="xsd:IDREF" use="required">
				<xsd:annotation>
					<xsd:documentation>
						ref may refer to the id of a glyph or the id of a port on a glyph
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="target" type="xsd:IDREF" use="required">
				<xsd:annotation>
					<xsd:documentation>
						ref may refer to the id of a glyph or the id of a port on a glyph
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="point">
		<xsd:complexType>
			<xsd:attributeGroup ref="sbgn-pd:PointAttributes"/>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="label">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:annotation>
					<xsd:documentation>
						a bbox on a label is optional.
						In case that there is no bbox defined,
						the bbox of the parent glyph is inherited.
						The label should be drawn centered horizontally and vertically 
						within  this bounding box
					</xsd:documentation>
				</xsd:annotation>
				<xsd:element ref="sbgn-pd:bbox" minOccurs="0" maxOccurs="1"/>
			</xsd:sequence>
			<xsd:attribute name="text" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:documentation>
						Multi-line labels are allowed. 
						Line breaks are encoded as &#xA;
						as specified by the XML standard.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>						
			<xsd:attribute name="font" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
						The font and fontsize attributes are just examples,
						more font attributes will probably be added in the future
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="fontsize" type="xsd:float" use="optional"/>
		</xsd:complexType>
	</xsd:element>
</xsd:schema>
