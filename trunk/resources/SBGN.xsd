<xsd:schema 
	targetNamespace="http://sbgn.org/libsbgn/pd/0.1"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" 	
	xmlns:sbgn-pd="http://sbgn.org/libsbgn/pd/0.1"
	elementFormDefault="qualified">
	<!-- the target Namespace is to be used for versioning the spec, as recommended by W3C -->

	<!-- Type Definitions -->	
	<xsd:attributeGroup name="SegmentAttributes">
		<xsd:attribute name="curve" default="straight">
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="straight"/>
					<xsd:enumeration value="quadratic"/>
					<xsd:enumeration value="cubic"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="x" type="xsd:float" use="required"/>
		<xsd:attribute name="y" type="xsd:float" use="required"/>
		<!-- x1 and y1 only to be used in case of quadratic and cubic segments !-->
		<xsd:attribute name="x1" type="xsd:float" use="optional"/>
		<xsd:attribute name="y1" type="xsd:float" use="optional"/>						
		<!-- x2 and y2 only to be used in case of cubic segments !-->
		<xsd:attribute name="x2" type="xsd:float" use="optional"/>
		<xsd:attribute name="y2" type="xsd:float" use="optional"/>						
	</xsd:attributeGroup>

	<xsd:element name="bbox">
		<!-- bbox defines outer bounding box, even if the shape
		is irregular (as may be the case for compartments.
		In the case of process nodes, the ports and the lines to them
		should be included in the bounding box.

		bbox can also be (optionally) added to labels-->
		<xsd:complexType>
			<xsd:attribute name="x" type="xsd:float" use="required"/>
			<xsd:attribute name="y" type="xsd:float" use="required"/>					
			<xsd:attribute name="w" type="xsd:float" use="required"/>					
			<xsd:attribute name="h" type="xsd:float" use="required"/>					
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="sbgn">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="sbgn-pd:glyph" minOccurs="0" maxOccurs="unbounded"/>
				<xsd:element ref="sbgn-pd:arc" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="glyph">
		<xsd:complexType>
			<xsd:sequence>
				<!-- Label is optional. You should not define a label for process nodes. -->
				<xsd:element name="label" minOccurs="0" maxOccurs="unbounded">
					<xsd:complexType>
						<xsd:sequence>
							<!-- a bbox on a label is optional. In case that there is no bbox defined,
							the bbox of the parent glyph is inherited.
							The label should be drawn centered horizontally and vertically 
							within  this bounding box
							!-->
							<xsd:element ref="sbgn-pd:bbox" minOccurs="0" maxOccurs="1"/>
						</xsd:sequence>
						<!-- Multi-line labels are allowed. 
							Line breaks are encoded as &#xA;
							as specified by the XML standard. -->
						<xsd:attribute name="text" type="xsd:string" use="required"/>						
						<!-- The font and fontsize attributes are just examples,
						more font attributes will probably be added in the future -->
						<xsd:attribute name="font" type="xsd:string" use="optional"/>
						<xsd:attribute name="fontsize" type="xsd:float" use="optional"/>
						<xsd:attribute name="role" use="optional">
							<xsd:simpleType>
								<xsd:restriction base="xsd:string">
									<xsd:enumeration value="clone marker"/>
								</xsd:restriction>
							</xsd:simpleType>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>
				<xsd:element ref="sbgn-pd:bbox" minOccurs="1" maxOccurs="1"/>
				<!-- subnodes are for states and units of information -->
				<xsd:element ref="sbgn-pd:glyph" minOccurs="0" maxOccurs="unbounded"/>
				<!-- ports are necessary for process nodes, but we may decide to
					use them also for other glyph types in the future, to help
					routing arcs -->
				<xsd:element name="port" minOccurs="0" maxOccurs="unbounded">
					<xsd:complexType>
						<xsd:attribute name="x" type="xsd:float" use="required"/>
						<xsd:attribute name="y" type="xsd:float" use="required"/>
						<!-- xsd:ID type is an alphanumeric identifier, starting with a letter.
						It is recommended to generate meaningless ID's such as glyph1234.
						Avoid ID's that have meaning in them, such as "epn1" or "epn_ethanol" -->
						<xsd:attribute name="id" type="xsd:ID" use="required"/>						
					</xsd:complexType>
				</xsd:element>
			</xsd:sequence>
			<xsd:attribute name="class" default="unspecified entity">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<!-- Entity Pool Node classes -->
						<xsd:enumeration value="unspecified entity"/>
						<xsd:enumeration value="simple chemical"/>
						<xsd:enumeration value="macromolecule"/>
						<xsd:enumeration value="nucleic acid feature"/>
						<xsd:enumeration value="simple chemical multimer"/>
						<xsd:enumeration value="macromolecule multimer"/>
						<xsd:enumeration value="nucleic acid feature multimer"/>
						<xsd:enumeration value="complex"/>
						<xsd:enumeration value="source and sink"/>
						<xsd:enumeration value="perturbing agent"/>
						<!-- Other -->
						<xsd:enumeration value="compartment"/>
						<xsd:enumeration value="submap"/>
						<xsd:enumeration value="tag"/>
						<!-- Process Node classes -->
						<xsd:enumeration value="process"/>
						<xsd:enumeration value="omitted process"/>
						<xsd:enumeration value="uncertain process"/>
						<xsd:enumeration value="association"/>
						<xsd:enumeration value="dissociation"/>
						<xsd:enumeration value="phenotype"/>
						<!-- Logical Operator classes -->
						<xsd:enumeration value="and"/>
						<xsd:enumeration value="or"/>
						<xsd:enumeration value="not"/>
						<!-- Subnode classes -->
						<xsd:enumeration value="state variable"/>
						<xsd:enumeration value="unit of information"/>
						<!-- NB Arc classes are in a separate enumeration -->
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="orientation" default="horizontal">
				<!-- orientation attribute is only meaningful for some glyph classes-->
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<!-- horizontal / vertical are for process nodes -->
						<xsd:enumeration value="horizontal"/>
						<xsd:enumeration value="vertical"/>
						<!-- left / right / up / down are for tags -->
						<xsd:enumeration value="left"/>
						<xsd:enumeration value="right"/>
						<xsd:enumeration value="up"/>
						<xsd:enumeration value="down"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="id" type="xsd:ID" use="required" />
			<xsd:attribute name="clone" type="xsd:boolean" use="optional" default="false" />
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="arc">
		<xsd:complexType>
			<xsd:sequence>
				<!-- an arc has one source, followed by 0 or more segments,
					followed by one target. An arc can be approximated
					by only looking at source and target.
					
					For each segment, only the end point is defined. The start
					point of the segment is assumed to be the same as the end point of
					the previous segment (or the "source", in the case of the first segment)
					
					The target element defines the final part of the arc. 
					Thus the source and target elements are very different: 
					source only specifies a single coordinate,
					whereas target specifies a whole (curving) segment.
				-->
				<xsd:element name="source" minOccurs="1" maxOccurs="1">
					<xsd:complexType>
						<xsd:attribute name="x" type="xsd:float" use="required"/>
						<xsd:attribute name="y" type="xsd:float" use="required"/>	
						<!-- ref may refer to the id of a glyph or the id of a port on a glyph -->
						<xsd:attribute name="ref" type="xsd:IDREF" use="required"/>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="segment" minOccurs="0" maxOccurs="unbounded">
					<xsd:complexType>
						<xsd:attributeGroup ref="sbgn-pd:SegmentAttributes"/>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="target" minOccurs="1" maxOccurs="1">
					<xsd:complexType>
						<xsd:attributeGroup ref="sbgn-pd:SegmentAttributes"/>
						<!-- ref may refer to the id of a glyph or the id of a port on a glyph -->
						<xsd:attribute name="ref" type="xsd:IDREF" use="required"/>						
					</xsd:complexType>
				</xsd:element>
			</xsd:sequence>
			<xsd:attribute name="class">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<!-- in case of reversible reactions, 
						use production on both the left and right hand sice arcs -->
						<xsd:enumeration value="production"/>
						<xsd:enumeration value="consumption"/>
						<xsd:enumeration value="modulation"/>
						<xsd:enumeration value="stimulation"/>
						<xsd:enumeration value="catalysis"/>
						<xsd:enumeration value="inhibition"/>
						<xsd:enumeration value="necessary stimulation"/>
						<xsd:enumeration value="logic arc"/>
						<xsd:enumeration value="equivalence arc"/>
						<!-- NB Process- and Entity Pool node classes are in a separate enumeration -->
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>

</xsd:schema>
