<xsd:schema 
	targetNamespace="http://sbgn.org/libsbgn/pd/0.1"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" 	
	xmlns:sbgn-pd="http://sbgn.org/libsbgn/pd/0.1"
	elementFormDefault="qualified">
	<xsd:annotation>
		<xsd:documentation>
			SBGNML is an XML implementation of the Systems Biology Graphical Notation.
			For more information, consult http://libsbgn.sourceforge.net

			Version: LibSBGN_PD_0.1 (cf. targetNamespace attribute - as recommended by the W3C)
		</xsd:documentation>
	</xsd:annotation>

<!-- COMMON TYPES AND ELEMENTS - COMMON TYPES AND ELEMENTS - COMMON TYPES AND ELEMENTS -->

<!-- PointAttributes attribute group -->
	<xsd:attributeGroup name="PointAttributes">
		<xsd:annotation>
			<xsd:documentation>
				The PointAttributes group describes absolute 2D cartesian coordinates:
				- x (horizontal, from left to right)
				- y (vertical, from top to bottom)
				The origin is located in the top-left corner of the map.
				The unit is ...? [!] point, pixel, whatever?
			</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="x" type="xsd:float" use="required"/>
		<xsd:attribute name="y" type="xsd:float" use="required"/>
	</xsd:attributeGroup>

<!-- point element -->
	<xsd:element name="point">
		<xsd:annotation>
			<xsd:documentation>
				The point element is characterized by PointAttributes,
				which describe absolute 2D cartesian coordinates:
				- x (horizontal, from left to right)
				- y (vertical, from top to bottom)
				The origin is located in the top-left corner of the map
				The unit is ...? [!] point, pixel, whatever?
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attributeGroup ref="sbgn-pd:PointAttributes"/>
		</xsd:complexType>
	</xsd:element>

<!-- bbox element -->
	<xsd:element name="bbox">
		<xsd:annotation>
			<xsd:documentation>
				The bbox element describes a rectangle:
				- PointAttributes corresponding to the 2D coordinates of the top left corner
				- width and height attributes
				The rectangle corresponds to the outer bounding box of a shape.
				The shape itself can be irregular (for instance in the case of some compartments)
				
				In the case of process nodes,
				the bounding box only concerns the central glyph (square, or circle),
				the input/output ports are not included, and neither are the lines connecting them
				to the central glyph.

				A bbox is required for all glyphs, and is optional for labels.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attributeGroup ref="sbgn-pd:PointAttributes"/>
			<xsd:attribute name="w" type="xsd:float" use="required"/>					
			<xsd:attribute name="h" type="xsd:float" use="required"/>					
		</xsd:complexType>
	</xsd:element>

<!-- label element -->
	
	<xsd:element name="label">
		<xsd:annotation>
			<xsd:documentation>
				The label element describes the text accompanying a glyph.
				The text attribute is mandatory.
				Its position can be specified by a bbox (optional)
				The style of the text can be described via some optional font attributes.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:annotation>
					<xsd:documentation>
						The bbox element of a label is optional.
						When no bbox is defined, the bbox of the parent glyph is inherited.
						The label should be drawn centered horizontally and vertically
						within the bbox.
					</xsd:documentation>
				</xsd:annotation>
				<xsd:element ref="sbgn-pd:bbox" minOccurs="0" maxOccurs="1"/>
			</xsd:sequence>
			<xsd:attribute name="text" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:documentation>
						Multi-line labels are allowed.
						Line breaks are encoded as &#xA;
						as specified by the XML standard.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>						
			<xsd:attribute name="font" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
						The font attribute refers to the font family.
						Provided for guidance only, it is optional and can be ignored.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="fontsize" type="xsd:float" use="optional">
				<xsd:annotation>
					<xsd:documentation>
						The fontsize attribute is expressed in ...? [!] Point, pixel, whatever?
						Provided for guidance only, it is optional and can be ignored.						
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>

<!-- HIGH LEVEL ELEMENTS - HIGH LEVEL ELEMENTS - HIGH LEVEL ELEMENTS - HIGH LEVEL ELEMENTS -->

<!-- sbgn element [root] -->

	<xsd:element name="sbgn">
		<xsd:annotation>
			<xsd:documentation>
				The sbgn element is the root of any SBGNML document.
				It can contain any number of map elements. [!] Do we keep the map element?
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="sbgn-pd:map" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>

<!-- map element -->

	<xsd:element name="map">
		<xsd:annotation>
			<xsd:documentation>
				The map element describes a single SBGN PD map.
				It contains a list of glyph elements and a list of arc elements.
				These lists can be of any size (possibly empty).
				 [!] Do we keep the map element?
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="sbgn-pd:glyph" minOccurs="0" maxOccurs="unbounded"/>
				<xsd:element ref="sbgn-pd:arc" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>

<!-- GLYPH GLYPH GLYPH GLYPH GLYPH GLYPH GLYPH GLYPH GLYPH GLYPH GLYPH GLYPH GLYPH GLYPH GLYPH G -->

	<xsd:element name="glyph">
		<xsd:annotation>
			<xsd:documentation>
				The glyph element is:
				- either a stand-alone, high-level SBGN glyph (an EPN, PN, compartment, etc.)
				- or a sub-glyph (state variable, unit of information, inside of a complex, etc.)
				In the first case, it appears directly in the glyph list of the map.
				In the second case, it is a child of another glyph element.
			</xsd:documentation>
		</xsd:annotation>

		<xsd:complexType>
			<xsd:sequence>
				<xsd:choice>
					<xsd:annotation>
						<xsd:documentation>
							The text inside a glyph is described:
							- either by a label element (optional) [process nodes can't have one]
							- or by a state element (optional) [for state variables only]
						</xsd:documentation>
					</xsd:annotation>
					<xsd:element ref="sbgn-pd:label" minOccurs="0" maxOccurs="1"/>
					<xsd:element name="state" minOccurs="0" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation>
								The state element should only be used for state variables.
								It replaces the label element used for other glyphs.
								It describes the text to be drawn inside the state variable.
							</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:attribute name="value" type="xsd:string" use="required">
								<xsd:annotation>
									<xsd:documentation>
										The value attribute represents the state of the variable.
										It can be:
										- either from a predefined set of string (P, S, etc.)
										which correspond to specific SBO terms (cf. SBGN specs)
										- or any arbitrary string
									</xsd:documentation>
								</xsd:annotation>
							</xsd:attribute>	
							<xsd:attribute name="variable" type="xsd:string" use="optional">
								<xsd:annotation>
									<xsd:documentation>
										The variable attribute describes the site where the 
										modification described by the value attribute occurs.
										It is:
										- optional when there is only one state variable on the
										parent EPN
										- required when there is more than one state variable the
										parent EPN
									</xsd:documentation>
								</xsd:annotation>
							</xsd:attribute>
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>

				<xsd:element name="clone" minOccurs="0" maxOccurs="1">
					<xsd:annotation>
						<xsd:documentation>
							The clone element is optional.
							It means the glyph carries a clone marker.
							It can contain an optional label.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="sbgn-pd:label" minOccurs="0" maxOccurs="1"/>
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
								
				<xsd:element ref="sbgn-pd:bbox" minOccurs="1" maxOccurs="1">
					<xsd:annotation>
						<xsd:documentation>
							 The bbox element is mandatory and unique: exactly one per glyph.
							 It defines the outer bounding box of the glyph.
							 The actual shape of the glyph can be irregular
							 (for instance in the case of some compartments)

							In the case of process nodes,
							the bounding box only concerns the central glyph (square, or circle),
							the input/output ports are not included, and neither are the lines connecting them
							to the central glyph.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>

				<xsd:element ref="sbgn-pd:glyph" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation>
							A glyph element can contain any number of children glyph elements.
							In practice, this should only happen in the following cases:
							- a compartment with unit of information children
							- an EPN with states variables and/or unit of information children
							- a complex, with state variables, unit of info, and/or EPN children
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				
				<xsd:element name="port" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation>
							The port element describes an anchor point
							which arcs can refer to as a source or target.
							It consists in:
							- absolute 2D cartesian coordinates (PointAttribute)
							- a unique id attribute
							Two port elements are required for process nodes (= two "sides")
							Other glyphs don't need ports, but can use them if desired
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attributeGroup ref="sbgn-pd:PointAttributes"/>
						<xsd:attribute name="id" type="xsd:ID" use="required">	
							<xsd:annotation>
								<xsd:documentation>
									The xsd:ID type is an alphanumeric identifier,
									starting with a letter.
									Port IDs often contain the ID of their glyph,
									followed by a local port number (e.g. glyph4.1, glyph4.2, etc.)
									However, this style convention is not mandatory,
									and IDs should never be interpreted as carrying any meaning.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>
			</xsd:sequence>

			<xsd:attribute name="class" default="unspecified entity">
				<xsd:annotation>
					<xsd:documentation>
						The class attribute defines the semantic of the glyph, and influences:
						- the way that glyph should be rendered
						- the overall syntactic validity of the map
						The various classes encompass the following SBGN elements:
						- Entity Pool Nodes (EPN)
						- Process Nodes (PN)
						- Logic Operator Nodes
						- Sub-glyphs on Nodes (State Variable, Unit of Information)
						- Sub-glyphs on Arcs (Stoichiometry Label)
						- Other glyphs (Compartment, Submap, Tag)
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<!-- Entity Pool Node classes -->
						<xsd:enumeration value="unspecified entity"/>
						<xsd:enumeration value="simple chemical"/>
						<xsd:enumeration value="macromolecule"/>
						<xsd:enumeration value="nucleic acid feature"/>
						<xsd:enumeration value="simple chemical multimer"/>
						<xsd:enumeration value="macromolecule multimer"/>
						<xsd:enumeration value="nucleic acid feature multimer"/>
						<xsd:enumeration value="complex"/>
						<xsd:enumeration value="complex multimer"/>
						<xsd:enumeration value="source and sink"/>
						<xsd:enumeration value="perturbing agent"/>
						<!-- Other -->
						<xsd:enumeration value="compartment"/>
						<xsd:enumeration value="submap"/>
						<xsd:enumeration value="tag"/>
						<!-- Process Node classes -->
						<xsd:enumeration value="process"/>
						<xsd:enumeration value="omitted process"/>
						<xsd:enumeration value="uncertain process"/>
						<xsd:enumeration value="association"/>
						<xsd:enumeration value="dissociation"/>
						<xsd:enumeration value="phenotype"/>
						<!-- Logical Operator classes -->
						<xsd:enumeration value="and"/>
						<xsd:enumeration value="or"/>
						<xsd:enumeration value="not"/>
						<!-- Subglyph on glyph classes -->
						<xsd:enumeration value="state variable"/>
						<xsd:enumeration value="unit of information"/>
						<!-- Subglyph on arc classes -->
						<xsd:enumeration value="stoichiometry"/>
						<!-- NB Arc classes are in a separate enumeration -->
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="orientation" default="horizontal">
				<xsd:annotation>
					<xsd:documentation>
						The orientation attribute is used to express how to draw asymmetric glyphs.
						The orientation of Process Nodes is either horizontal or vertical.
						It refers to an (imaginary) line connecting the two in/out sides of the PN.
						The orientation of Tags can be left, right, up or down.
						It refers to the direction the arrow side of the glyph is pointing at.
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<!-- horizontal / vertical are for process nodes -->
						<xsd:enumeration value="horizontal"/>
						<xsd:enumeration value="vertical"/>
						<!-- left / right / up / down are for tags -->
						<xsd:enumeration value="left"/>
						<xsd:enumeration value="right"/>
						<xsd:enumeration value="up"/>
						<xsd:enumeration value="down"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="id" type="xsd:ID" use="required">	
				<xsd:annotation>
					<xsd:documentation>
						The xsd:ID type is an alphanumeric identifier,
						starting with a letter.
						It is recommended to generate meaningless IDs (e.g. "glyph1234")
						and avoid IDs with a meaning (e.g. "epn_ethanol")
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>

<!-- ARC ARC ARC ARC ARC ARC ARC ARC ARC ARC ARC ARC ARC ARC ARC ARC ARC ARC ARC ARC ARC ARC ARC -->

	<xsd:element name="arc">
		<xsd:annotation>
			<xsd:documentation>
				The arc element describes an SBGN arc between two SBGN nodes.
				It contains:
				- an optional stoichiometry marker
				- a mandatory source and target (glyph or port)
				- a geometric description of its whole path, from start to end
				This path can involve any number of straight lines or quadratic/cubic Bezier curves.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="sbgn-pd:glyph" minOccurs="0" maxOccurs="1">
					<xsd:annotation>
						<xsd:documentation>
							An arc can contain a single optional sub-glyph.
							This glyph must be a stoichiometry marker (square with a numeric label)
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="start" minOccurs="1" maxOccurs="1">
					<xsd:annotation>
						<xsd:documentation>
							The start element represents the starting point of the arc's path
							It is unique and mandatory.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attributeGroup ref="sbgn-pd:PointAttributes"/>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="next" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation>
							The next element represents the next point in the arc's path.
							Between the start and the end of the path, there can be any number
							(even zero) of next elements (intermediate points).
							They are read consecutively: start, next, next, ..., next, end
							When the path from the previous point to this point is not straight,
							this element also contains a list of control points (between 1 and 2)
							describing a Bezier curve (quadratic if 1 control point, cubic if 2)
							between the previous point and this point.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:annotation>
								<xsd:documentation>
									List of control points, used when the path describes a curve.
									The number of points describes the degree of the Bezier curve:
									linear (0), quadratic (1) or cubic (2)
								</xsd:documentation>
							</xsd:annotation>
							<xsd:element ref="sbgn-pd:point" minOccurs="0" maxOccurs="2"/>
						</xsd:sequence>
						<xsd:attributeGroup ref="sbgn-pd:PointAttributes"/>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="end" minOccurs="1" maxOccurs="1">
					<xsd:annotation>
						<xsd:documentation>
							The end element represents the ending point of the arc's path.
							It is unique and mandatory.
							When the path from the previous point to this point is not straight,
							this element also contains a list of control points (between 1 and 2)
							describing a Bezier curve (quadratic if 1 control point, cubic if 2)
							between the previous point and this point.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:annotation>
								<xsd:documentation>
									List of control points, used when the path describes a curve.
									The number of points describes the degree of the Bezier curve:
									linear (0), quadratic (1) or cubic (2)
								</xsd:documentation>
							</xsd:annotation>
							<xsd:element ref="sbgn-pd:point" minOccurs="0" maxOccurs="2"/>
						</xsd:sequence>
						<xsd:attributeGroup ref="sbgn-pd:PointAttributes"/>
					</xsd:complexType>
				</xsd:element>
			</xsd:sequence>
			
			<xsd:attribute name="class">
				<xsd:annotation>
					<xsd:documentation>
						The class attribute defines the semantic of the arc, and influences:
						- the way that arc should be rendered
						- the overall syntactic validity of the map
						The various classes encompass all possible types of SBGN arcs:
						- production and consumption arcs
						- all types of modification arcs
						- logic arcs
						- equivalence arcs
						To express a reversible reaction,
						use production arcs on both sides of the Process Node
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="production"/>
						<xsd:enumeration value="consumption"/>
						<xsd:enumeration value="modulation"/>
						<xsd:enumeration value="stimulation"/>
						<xsd:enumeration value="catalysis"/>
						<xsd:enumeration value="inhibition"/>
						<xsd:enumeration value="necessary stimulation"/>
						<xsd:enumeration value="logic arc"/>
						<xsd:enumeration value="equivalence arc"/>
						<!-- NB Process- and Entity Pool node classes are in a separate enumeration -->
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="source" type="xsd:IDREF" use="required">
				<xsd:annotation>
					<xsd:documentation>
						The source attribute can refer:
						- either to the id of a glyph
						- or to the id of a port on a glyph
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="target" type="xsd:IDREF" use="required">
				<xsd:annotation>
					<xsd:documentation>
						The target attribute can refer:
						- either to the id of a glyph
						- or to the id of a port on a glyph
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>

</xsd:schema>
